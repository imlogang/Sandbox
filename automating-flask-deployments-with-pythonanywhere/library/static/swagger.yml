openapi: 3.0.0
info:
  version: 1.0.0
  title: Library_manager
  description: Library book management API.
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
    
servers: 
  - url: '{protocol}://waweru.pythonanywhere.com/'
    description: default server
    variables:
      protocol:
        enum: 
          - http
          - https
        default: https

paths:
  /signup:
    post:
      tags:
        - "User"
      summary: user signup 
      description: new users need to provide a unique username & password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        200:
          description: User successfully registered.
        403:
          description: Action forbiden!

  /login:
    post:
      tags:
        - "User"
      summary: user login
      description: Registered users can login and returns the API authorization token
      requestBody:
        description: allows users to login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  

      responses:
        201:
          description: successfully logged in!
        401:
          description: Could not verify user details.

  /bookapi/addbook:
    post:
      tags:
        - "Books"
      summary: add a book
      description: allows uses to create new books
      requestBody: 
        description: users can create new books
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      # apiAuth application
      security:
        - ApiKeyAuth: []
              
      responses:      
        201:
          description: book successfully created
        409:
          description: bad method- book already exists
        401:
          description: authorization error

  /bookapi/books:
    get:
      tags:
        - "Books"
      summary: get all books
      description: retrieves all the book records

      security:
        - ApiKeyAuth: []
      
      
      responses:
        200:
          description: all books returned
        500:
          description: InternalServerError

  /bookapi/book/{id}:
    get:
      tags:
        - "Books"
      summary: get book by id
      description: retrieves a single book entry using id
      parameters:
        - in: path
          name: id
          description: id of the book
          required: true
          schema:
            type: integer
            example: 2

      # apiAuth application
      security:
        - ApiKeyAuth: []

      responses:
        200:
          description: Success
        500:
          description: oops! something is wrong with the server
tags:
  - name: User
    description: labels for users
  - name: Books
    description: label for books category
        
components:
  securitySchemes:
    # basic authentication(security)
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-access-token
  schemas:
    User:
      description: model consisting user info
      type: object
      properties:
        username:
          type: string
          example: will
        
        password:
          type: string
          example: p1234
    Book:
      description: model containing book info
      type: object
      properties:
        title:
          type: string
          example: testing python
        author:
          type: string
          example: david
