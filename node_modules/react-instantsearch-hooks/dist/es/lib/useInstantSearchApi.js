import InstantSearch from "instantsearch.js/es/lib/InstantSearch.js";
import { useCallback, useMemo, version as ReactVersion } from 'react';
import { useSyncExternalStore } from "use-sync-external-store/shim/index.js";
import { useInstantSearchServerContext } from "./useInstantSearchServerContext.js";
import { useInstantSearchSSRContext } from "./useInstantSearchSSRContext.js";
import version from "../version.js";
import { useForceUpdate } from "./useForceUpdate.js";
import { useStableValue } from "./useStableValue.js";
var defaultUserAgents = ["react (".concat(ReactVersion, ")"), "react-instantsearch (".concat(version, ")"), "react-instantsearch-hooks (".concat(version, ")")];
export function useInstantSearchApi(props) {
  var forceUpdate = useForceUpdate();
  var serverContext = useInstantSearchServerContext();
  var serverState = useInstantSearchSSRContext();
  var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;
  var stableProps = useStableValue(props);
  var search = useMemo(function () {
    var instance = new InstantSearch(stableProps);

    if (serverContext || initialResults) {
      // InstantSearch.js has a private Initial Results API that lets us inject
      // results on the search instance.
      // On the server, we default the initial results to an empty object so that
      // InstantSearch.js doesn't schedule a search that isn't used, leading to
      // an additional network request. (This is equivalent to monkey-patching
      // `scheduleSearch` to a noop.)
      instance._initialResults = initialResults || {};
    }

    addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && "react-instantsearch-server (".concat(version, ")")]));
    return instance;
  }, [initialResults, props.searchClient, serverContext, stableProps]);
  var store = useSyncExternalStore(useCallback(function () {
    // On SSR, the instance is already started so we don't start it again here.
    if (!search.started) {
      search.start();
      forceUpdate();
    }

    return function () {
      search.dispose();
    };
  }, [forceUpdate, search]), function () {
    return search;
  }, function () {
    return search;
  });

  if (!search.started) {
    // On the server, we start the search early to compute the search parameters.
    // On SSR, we start the search early to directly catch up with the lifecycle
    // and render.
    if (serverContext || initialResults) {
      search.start();
    }

    if (serverContext) {
      // We notify `getServerState()` of the InstantSearch internals to retrieve
      // the server state and pass it to the render on SSR.
      serverContext.notifyServer({
        search: search
      });
    }
  }

  return store;
}

function addAlgoliaAgents(searchClient, userAgents) {
  if (typeof searchClient.addAlgoliaAgent !== 'function') {
    return;
  }

  userAgents.filter(Boolean).forEach(function (userAgent) {
    searchClient.addAlgoliaAgent(userAgent);
  });
}