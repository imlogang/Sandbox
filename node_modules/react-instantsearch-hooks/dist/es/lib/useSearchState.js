import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { useConnector } from "../hooks/useConnector.js";

var connectSearchState = function connectSearchState(renderFn) {
  return function (widgetParams) {
    var setUiState;
    var setIndexUiState;
    return {
      $$type: 'ais.searchState',
      getWidgetRenderState: function getWidgetRenderState(_ref) {
        var instantSearchInstance = _ref.instantSearchInstance,
            parent = _ref.parent;
        var indexId = parent.getIndexId();
        var uiState = instantSearchInstance.getUiState();
        var indexUiState = uiState[indexId];

        if (!setUiState) {
          setUiState = instantSearchInstance.setUiState.bind(instantSearchInstance);
        }

        if (!setIndexUiState) {
          setIndexUiState = function setIndexUiState(nextUiState) {
            setUiState(function (prevUiState) {
              return _objectSpread(_objectSpread({}, prevUiState), {}, _defineProperty({}, indexId, typeof nextUiState === 'function' ? nextUiState(prevUiState[indexId]) : nextUiState));
            });
          };
        }

        return {
          uiState: uiState,
          indexUiState: indexUiState,
          setUiState: setUiState,
          setIndexUiState: setIndexUiState,
          widgetParams: widgetParams
        };
      },
      render: function render(renderOptions) {
        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
      },
      dispose: function dispose() {}
    };
  };
};

export function useSearchState() {
  return useConnector(connectSearchState);
}