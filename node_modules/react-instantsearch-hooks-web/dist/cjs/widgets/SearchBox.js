"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchBox = SearchBox;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactInstantsearchHooks = require("react-instantsearch-hooks");

var _SearchBox = require("../ui/SearchBox");

var _excluded = ["queryHook"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SearchBox(_ref) {
  var queryHook = _ref.queryHook,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useSearchBox = (0, _reactInstantsearchHooks.useSearchBox)({
    queryHook: queryHook
  }, {
    $$widgetType: 'ais.searchBox'
  }),
      query = _useSearchBox.query,
      refine = _useSearchBox.refine,
      isSearchStalled = _useSearchBox.isSearchStalled;

  var _useState = (0, _react.useState)(query),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var inputRef = (0, _react.useRef)(null);

  function onReset() {
    setValue('');
  }

  function onChange(event) {
    setValue(event.currentTarget.value);
  } // Track when the value coming from the React state changes to synchronize
  // it with InstantSearch.


  (0, _react.useEffect)(function () {
    if (query !== value) {
      refine(value);
    } // We don't want to track when the InstantSearch query changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [value, refine]); // Track when the InstantSearch query changes to synchronize it with
  // the React state.

  (0, _react.useEffect)(function () {
    // We bypass the state update if the input is focused to avoid concurrent
    // updates when typing.
    if (document.activeElement !== inputRef.current && query !== value) {
      setValue(query);
    } // We don't want to track when the React state value changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [query]);
  var uiProps = {
    inputRef: inputRef,
    isSearchStalled: isSearchStalled,
    onChange: onChange,
    onReset: onReset,
    value: value,
    translations: {
      submitTitle: 'Submit the search query.',
      resetTitle: 'Clear the search query.'
    }
  };
  return /*#__PURE__*/_react.default.createElement(_SearchBox.SearchBox, (0, _extends2.default)({}, props, uiProps));
}