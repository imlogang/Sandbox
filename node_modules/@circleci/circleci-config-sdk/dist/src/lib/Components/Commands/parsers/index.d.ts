import { CustomCommand } from '../../Reusable';
import { Command } from '../exports/Command';
/**
 * Parses a list of steps into a list of commands.
 * @param stepsListIn - The steps from a job or custom command.
 * @param commands - The custom command list to refer to when a step is a reusable command.
 * @returns A list of parsed commands.
 */
export declare function parseSteps(stepsListIn: unknown, commands?: CustomCommand[]): Command[];
/**
 * Parse an unknown step into a native or reusable command.
 * If the step name is a not a native command, the
 * @param name - The name of the command.
 * @param args - The arguments to the command.
 * @param commands - Only required when parsing reusable commands
 * @returns Command or ReusableCommand
 */
export declare function parseStep(name: string, args?: unknown, commands?: CustomCommand[]): Command;
/**
 * Parse a config's list of custom commands, to later be referenced by ReusableCommands.
 * @param commandListIn - The list of custom commands to parse.
 * @param custom_commands - The custom commands to parse.
 * @returns A list of custom commands.
 */
export declare function parseCustomCommands(commandListIn: {
    [key: string]: unknown;
}, custom_commands?: CustomCommand[]): CustomCommand[];
/**
 * Parse a single custom command.
 * @param name - The name of the command.
 * @param args - The arguments of the command.
 * @param custom_commands - A reference list of custom commands to use for nested custom commands.
 * @returns A custom command.
 * @throws Error if the custom command is not valid.
 */
export declare function parseCustomCommand(name: string, args: unknown, custom_commands?: CustomCommand[]): CustomCommand;
//# sourceMappingURL=index.d.ts.map