import { Job } from '..';
import { CustomCommand } from '../../Commands/exports/Reusable/CustomCommand';
import { ReusableExecutor } from '../../Reusable';
/**
 * Parse a config's list of jobs into a list of Job instances.
 *
 * @param jobListIn - The high level list of jobs to be parsed
 * @param customCommands - The reference list of custom commands to be used when parsing reusable command steps
 * @param reusableExecutors - The reference list of reusable executors to be used
 * @returns A list of jobs
 * @throws Error if a job is not valid
 */
export declare function parseJobList(jobListIn: {
    [key: string]: unknown;
}, customCommands?: CustomCommand[], reusableExecutors?: ReusableExecutor[]): Job[];
/**
 * Parse a single job into a Job instance.
 * ParameterizedJobs are assumed if `jobIn` contains the parameter key.
 *
 * @param name - The name of the job.
 * @param jobIn - The job to be parsed.
 * @param customCommands - The reference list of custom commands to be used for parsing reusable command steps.
 * @param reusableExecutors - The reference list of reusable executors to be used.
 * @returns A generic or parameterized job.
 * @throws Error if the job is not valid.
 */
export declare function parseJob(name: string, jobIn: unknown, customCommands?: CustomCommand[], reusableExecutors?: ReusableExecutor[]): Job;
//# sourceMappingURL=index.d.ts.map