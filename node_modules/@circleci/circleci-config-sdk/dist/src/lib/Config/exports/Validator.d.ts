import Ajv, { SchemaObject } from 'ajv';
import { GenerableSubtypes } from '../types/Mapping.types';
import { ValidationResult } from '../types/Validator.types';
import { GenerableType } from './Mapping';
/**
 * An Ajv object that can validate a config and it's components
 * Does not handle validation of parameter usage.
 */
export declare class Validator extends Ajv {
    private static instance;
    static validateOnParse: boolean;
    private constructor();
    /**
     * Access a generic singleton instance of the ConfigValidator
     * Useful if validating components without a Config object
     * Use the config's validator if Config has parameterized components.
     * @returns generic instance of ConfigValidator
     */
    static getInstance(): Validator;
    /**
     * Validate an unknown generable config object
     * @param generable - The class name of a generable config component
     * @param subtype - The subtype of the config component - Required for CustomParameter
     * @returns
     */
    static validateGenerable(generable: GenerableType, input: unknown, subtype?: GenerableSubtypes): ValidationResult;
    validateComponent(schema: SchemaObject, data: unknown): ValidationResult;
}
//# sourceMappingURL=Validator.d.ts.map